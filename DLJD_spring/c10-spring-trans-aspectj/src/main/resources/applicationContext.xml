<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 把数据库的配置信息，写在一个独立的文件，编译修改数据库的配置内容
        让spring知道jdbc.properties文件的位置-->
    <context:property-placeholder location="classpath:mybatis.properties"/>

    <!--
        声明数据源，用来链接数据库
        后面的属性都是class="com.alibaba.druid.pool.DruidDataSource"
        这个类中的set方法
        使用属性配置文件中的数据的话，语法为${}
    -->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--用set注入DruidDataSource提供链接数据库信息-->
        <property name="url" value="${mybatis.url}"/>
        <property name="username" value="${mybatis.username}"/>
        <property name="password" value="${mybatis.password}"/>
        <property name="maxActive" value="${mybatis.max}"/>
    </bean>

    <!--声明的是mybatis中提供的SqlSessionFactoryBean类，内部是创建SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库链接池赋给了DataSource-->
        <property name="dataSource" ref="myDataSource"/>

        <!--
        mybatis主配置文件的位置
        configLocation属性是Resource类型，读取配置文件
        它的赋值用value,指定文件的路径，使用classpath:表示文件的位置
        -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SQLSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

        <!--
        指定包名，包名是dao接口所在的包名
        MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行
        一次getMapper()方法，得到每个接口的dao对象。
        创建好的dao对象放入到spring 容器中
        -->
        <property name="basePackage" value="org.example.dao"/>
    </bean>

    <bean id="buyGoodsService" class="org.example.service.impl.BuyGoodsServiceImpl">
        <!--默认名称是接口的首字母小写,所以这里的ref是studentDao-->
        <property name="saleDao" ref="saleDao"/>
        <property name="goodsDao" ref="goodsDao"/>
    </bean>


    <!--声明式的事务处理，和源代码完全分离-->
    <!--声明事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <!--
    声明业务方法和它的事务属性（隔离级别，传播行为，超时时间）
    id:自定义名称，表示<tx:advice>和</tx:advice>之间的配置内容
    transaction-manager事务管理器的id
    -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <!--tx:attributes:配置事务属性-->
        <tx:attributes>
            <!--
            tx:method:给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性
            name:方法名称 1）完整的方法名称，不带有包和类
                          2）可以使用通配符*  表示任意字符
            propagation：传播行为
            isolation:隔离级别
            rollback-for；指定的异常类名，全限定类名，发生异常时一定会回滚
            -->

            <!--先找完全匹配的，再部分通配符，最后是*的-->
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="java.lang.NullPointerException,org.example.exception.NotEnoughException"/>


            <!--这样可以指定add开头的方法-->
            <tx:method name="add*"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="modify*"/>
            <!--其余的方法-->
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>

        </tx:attributes>
    </tx:advice>

    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式：指定那些包中类要使用事务
        id:切入点表达式的名称，唯一值
        expression：切入点表达式，指定哪些类要使用事务，
        aspectj 会创建代理对象
        -->
        <aop:pointcut id="servicePointCut" expression="execution(* *..service..*.*(..))"/>

        <!--配置增强器：关联advice和pointcut
        advice-ref：通知，上面tx:advice那里的通知
        pointcut-ref:切入点表达式的id
        -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePointCut"/>
    </aop:config>
</beans>