<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 把数据库的配置信息，写在一个独立的文件，编译修改数据库的配置内容
 让spring知道jdbc.properties文件的位置-->
    <context:property-placeholder location="classpath:mybatis.properties"/>

    <!--
        声明数据源，用来链接数据库
        后面的属性都是class="com.alibaba.druid.pool.DruidDataSource"
        这个类中的set方法
        使用属性配置文件中的数据的话，语法为${}
        -->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--用set注入DruidDataSource提供链接数据库信息-->
        <property name="url" value="${mybatis.url}"/>
        <property name="username" value="${mybatis.username}"/>
        <property name="password" value="${mybatis.password}"/>
        <property name="maxActive" value="${mybatis.max}"/>
    </bean>

    <!--声明的是mybatis中提供的SqlSessionFactoryBean类，内部是创建SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库链接池赋给了DataSource-->
        <property name="dataSource" ref="myDataSource"/>

        <!--
        mybatis主配置文件的位置
        configLocation属性是Resource类型，读取配置文件
        它的赋值用value,指定文件的路径，使用classpath:表示文件的位置
        -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SQLSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

        <!--
        指定包名，包名是dao接口所在的包名
        MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行
        一次getMapper()方法，得到每个接口的dao对象。
        创建好的dao对象放入到spring 容器中
        -->
        <property name="basePackage" value="org.example.dao"/>
    </bean>

    <bean id="buyGoodsService" class="org.example.service.impl.BuyGoodsServiceImpl">
        <!--默认名称是接口的首字母小写,所以这里的ref是studentDao-->
        <property name="saleDao" ref="saleDao"/>
        <property name="goodsDao" ref="goodsDao"/>
    </bean>



    <!--spring事务处理-->
    <!--1 声明事务管理器-->
    <bean id="TransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--链接的数据库，指定数据源-->
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <!--2 告诉spring使用注解管理事务，创建代理对象
    transaction-manager:事务管理器对象的id-->
    <tx:annotation-driven transaction-manager="TransactionManager"/>
</beans>